import SwiftUI

struct EditMessageView: View {
    @ObservedObject var appState: AppState
    @Environment(\.dismiss) private var dismiss
    @State private var messageText: String = ""
    @State private var showingAlert = false
    @State private var alertMessage = ""
    
    private let emojis = ["‚òïÔ∏è", "üí∞", "üéâ", "üéä", "üíé", "üåü", "‚ú®", "üî•", "üí™", "üéØ", "üèÜ", "üíñ", "üòä", "ü•≥", "üéÅ", "üéà"]
    
    var body: some View {
        NavigationView {
            VStack(spacing: 20) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                Text("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞")
                    .font(.title2)
                    .fontWeight(.bold)
                    .padding(.top, 20)
                
                // –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
                VStack(alignment: .leading, spacing: 10) {
                    Text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
                        .font(.headline)
                    
                    TextEditor(text: $messageText)
                        .frame(minHeight: 120)
                        .padding(10)
                        .background(Color(.systemGray6))
                        .cornerRadius(10)
                        .overlay(
                            RoundedRectangle(cornerRadius: 10)
                                .stroke(Color(.systemGray4), lineWidth: 1)
                        )
                }
                .padding(.horizontal, 20)
                
                // –≠–º–æ–¥–∑–∏
                VStack(alignment: .leading, spacing: 10) {
                    Text("–î–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏:")
                        .font(.headline)
                        .padding(.horizontal, 20)
                    
                    LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 8), spacing: 10) {
                        ForEach(emojis, id: \.self) { emoji in
                            Button(emoji) {
                                messageText += emoji
                            }
                            .font(.title2)
                            .frame(width: 40, height: 40)
                            .background(Color(.systemGray5))
                            .cornerRadius(8)
                        }
                    }
                    .padding(.horizontal, 20)
                }
                
                Spacer()
                
                // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                VStack(spacing: 15) {
                    HStack(spacing: 15) {
                        Button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å") {
                            saveMessage()
                        }
                        .buttonStyle(.borderedProminent)
                        .tint(.green)
                        
                        Button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å") {
                            resetMessage()
                        }
                        .buttonStyle(.borderedProminent)
                        .tint(.orange)
                    }
                    
                    Button("‚ùå –û—Ç–º–µ–Ω–∞") {
                        dismiss()
                    }
                    .buttonStyle(.borderedProminent)
                    .tint(.red)
                }
                .padding(.bottom, 20)
            }
            .navigationTitle("")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("–ì–æ—Ç–æ–≤–æ") {
                        dismiss()
                    }
                }
            }
        }
        .onAppear {
            messageText = appState.customMessage
        }
        .alert("–°–æ–æ–±—â–µ–Ω–∏–µ", isPresented: $showingAlert) {
            Button("OK") {
                if alertMessage.contains("—É—Å–ø–µ—à–Ω–æ") {
                    dismiss()
                }
            }
        } message: {
            Text(alertMessage)
        }
    }
    
    private func saveMessage() {
        let trimmedText = messageText.trimmingCharacters(in: .whitespacesAndNewlines)
        
        if trimmedText.isEmpty {
            alertMessage = "–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!"
            showingAlert = true
            return
        }
        
        appState.updateMessage(trimmedText)
        alertMessage = "–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω! ‚ú®"
        showingAlert = true
    }
    
    private func resetMessage() {
        let defaultMessage = "–õ—É–∏–∑–∞, –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ –¥–µ–Ω–µ–∂–Ω—ã–π —á–µ—Ç–≤–µ—Ä–≥! ‚òïÔ∏è üí∞ üéâ"
        messageText = defaultMessage
    }
}

#Preview {
    EditMessageView(appState: AppState())
}
