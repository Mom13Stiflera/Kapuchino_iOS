import SwiftUI

struct SettingsView: View {
    @ObservedObject var appState: AppState
    @Environment(\.dismiss) private var dismiss
    @State private var reminderTime = Date()
    @State private var showingResetAlert = false
    @State private var showingResetSuccess = false
    
    var body: some View {
        NavigationView {
            Form {
                // –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                Section("üïê –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è") {
                    DatePicker("–í—Ä–µ–º—è", selection: $reminderTime, displayedComponents: .hourAndMinute)
                        .datePickerStyle(.wheel)
                        .onChange(of: reminderTime) { newTime in
                            saveReminderTime(newTime)
                        }
                    
                    Text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                
                // –°—á–µ—Ç—á–∏–∫ –∫–∞–ø—É—á–∏–Ω–æ
                Section("‚òï –°—á–µ—Ç—á–∏–∫ –∫–∞–ø—É—á–∏–Ω–æ") {
                    HStack {
                        Text("–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫:")
                        Spacer()
                        Text("\(appState.cappuccinoCount)")
                            .fontWeight(.bold)
                            .foregroundColor(.green)
                    }
                    
                    Button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫") {
                        showingResetAlert = true
                    }
                    .foregroundColor(.orange)
                }
                
                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
                Section("‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏") {
                    HStack {
                        Text("–í–µ—Ä—Å–∏—è:")
                        Spacer()
                        Text("1.0.0")
                            .foregroundColor(.secondary)
                    }
                    
                    HStack {
                        Text("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:")
                        Spacer()
                        Text("Kapuchino Team")
                            .foregroundColor(.secondary)
                    }
                    
                    HStack {
                        Text("–û–ø–∏—Å–∞–Ω–∏–µ:")
                        Spacer()
                        Text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–Ω–µ–∂–Ω–æ–º —á–µ—Ç–≤–µ—Ä–≥–µ")
                            .foregroundColor(.secondary)
                            .multilineTextAlignment(.trailing)
                    }
                }
                
                // –°–±—Ä–æ—Å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                Section("‚ö†Ô∏è –û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞") {
                    Button("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏") {
                        showingResetAlert = true
                    }
                    .foregroundColor(.red)
                }
            }
            .navigationTitle("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("–ì–æ—Ç–æ–≤–æ") {
                        dismiss()
                    }
                }
            }
        }
        .onAppear {
            loadReminderTime()
        }
        .alert("–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫", isPresented: $showingResetAlert) {
            Button("–û—Ç–º–µ–Ω–∞", role: .cancel) { }
            Button("–°–±—Ä–æ—Å–∏—Ç—å", role: .destructive) {
                resetAllSettings()
            }
        } message: {
            Text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.")
        }
        .alert("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã", isPresented: $showingResetSuccess) {
            Button("OK") { }
        } message: {
            Text("–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        }
    }
    
    private func loadReminderTime() {
        let calendar = Calendar.current
        let now = Date()
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è 9:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        var components = calendar.dateComponents([.year, .month, .day], from: now)
        components.hour = 9
        components.minute = 0
        
        reminderTime = calendar.date(from: components) ?? now
    }
    
    private func saveReminderTime(_ time: Date) {
        let calendar = Calendar.current
        let hour = calendar.component(.hour, from: time)
        let minute = calendar.component(.minute, from: time)
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –≤ UserDefaults
        // –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        print("–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ \(hour):\(minute)")
    }
    
    private func resetAllSettings() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        appState.resetMessage()
        appState.cappuccinoCount = 0
        appState.removePhoto()
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        loadReminderTime()
        
        showingResetSuccess = true
    }
}

#Preview {
    SettingsView(appState: AppState())
}
